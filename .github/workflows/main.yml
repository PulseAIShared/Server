name: CI/CD Pipeline with Working HTTPS and CORS
on:
  push:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      # Step 4: Create nginx configuration (no CORS - let ASP.NET handle it)
      - name: Create nginx configuration
        run: |
          cat > nginx.conf << 'EOL'
          events {
              worker_connections 1024;
          }
          
          http {
              # Redirect HTTP to HTTPS
              server {
                  listen 80;
                  server_name ${{ secrets.DOMAIN_NAME }};
                  
                  # Let's Encrypt ACME challenge
                  location /.well-known/acme-challenge/ {
                      root /var/www/certbot;
                  }
                  
                  # Redirect everything else to HTTPS
                  location / {
                      return 301 https://$host$request_uri;
                  }
              }
              
              # HTTPS server
              server {
                  listen 443 ssl http2;
                  server_name ${{ secrets.DOMAIN_NAME }};
                  
                  # SSL Configuration
                  ssl_certificate /etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem;
                  ssl_certificate_key /etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/privkey.pem;
                  
                  # Modern SSL configuration
                  ssl_protocols TLSv1.2 TLSv1.3;
                  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
                  ssl_prefer_server_ciphers off;
                  ssl_session_cache shared:SSL:10m;
                  ssl_session_timeout 10m;
                  
                  # Security headers (NO CORS - let ASP.NET handle CORS)
                  add_header Strict-Transport-Security "max-age=31536000" always;
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
                  
                  location / {
                      # Simple proxy - ASP.NET handles CORS
                      proxy_pass http://api:5000;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection keep-alive;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_set_header X-Forwarded-Host $server_name;
                      proxy_cache_bypass $http_upgrade;
                      
                      # Increase timeouts
                      proxy_connect_timeout 60s;
                      proxy_send_timeout 60s;
                      proxy_read_timeout 60s;
                  }
              }
          }
          EOL
      
      # Step 5: Update ASP.NET Core CORS configuration
      - name: Update ASP.NET Core CORS
        run: |
          # Update DependencyInjection.cs to fix CORS configuration
          cat > Web.Api/DependencyInjection.cs << 'EOL'
          using Web.Api.Infrastructure;
          
          namespace Web.Api;
          
          public static class DependencyInjection
          {
              public static IServiceCollection AddPresentation(this IServiceCollection services)
              {
                  services.AddEndpointsApiExplorer();
                  services.AddSwaggerGen();
          
                  services.AddMemoryCache();
                  services.AddExceptionHandler<GlobalExceptionHandler>();
                  services.AddProblemDetails();
          
                  services.AddCors(options =>
                  {
                      options.AddPolicy("AllowNetlifyApp", policy =>
                      {
                          policy.WithOrigins("https://pulseretention.netlify.app")
                                .AllowAnyHeader()
                                .AllowAnyMethod()
                                .AllowCredentials()
                                .SetIsOriginAllowed(origin => origin == "https://pulseretention.netlify.app");
                      });
                  });
          
                  return services;
              }
          }
          EOL
          
          # Update Program.cs to use the specific CORS policy
          sed -i 's/app.UseCors("Development");/app.UseCors("AllowNetlifyApp");/g' Web.Api/Program.cs
          sed -i 's/app.UseCors("Production");/app.UseCors("AllowNetlifyApp");/g' Web.Api/Program.cs
      
      # Step 6: Create production docker-compose
      - name: Create production docker-compose
        run: |
          cat > docker-compose.deploy.yml << 'EOL'
          services:
            api:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/pulseai:latest
              expose:
                - "5000"
              environment:
                ASPNETCORE_ENVIRONMENT: "Production"
                ASPNETCORE_URLS: "http://+:5000"
                ConnectionStrings__Database: "Host=db;Port=5432;Database=pulseai;Username=postgres;Password=${DB_PASSWORD}"
                Jwt__Secret: "${JWT_SECRET}"
                Jwt__Issuer: "pulseai-api"
                Jwt__Audience: "pulseai-clients"
              networks:
                - pulseai-network
              restart: unless-stopped
              depends_on:
                - db
          
            nginx:
              image: nginx:latest
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
                - letsencrypt:/etc/letsencrypt:ro
                - certbot:/var/www/certbot
              networks:
                - pulseai-network
              restart: unless-stopped
              depends_on:
                - api
          
            certbot:
              image: certbot/certbot
              volumes:
                - letsencrypt:/etc/letsencrypt
                - certbot:/var/www/certbot
              networks:
                - pulseai-network
          
            db:
              image: postgres:15-alpine
              restart: unless-stopped
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: "${DB_PASSWORD}"
                POSTGRES_DB: pulseai
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - pulseai-network
          
          volumes:
            postgres_data:
            letsencrypt:
            certbot:
          
          networks:
            pulseai-network:
              driver: bridge
          EOL
      
      # Step 7: Build and push API image
      - name: Build and push API image
        run: |
          docker compose build api
          docker compose push api
      
      # Step 8: Create environment file
      - name: Create environment file
        run: |
          cat > .env << EOL
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
          CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}
          EOL
      
      # Step 9: Deploy with automatic HTTPS setup
      - name: Deploy with HTTPS and CORS fix
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.DIGITALOCEAN_DROPLET_IP }} >> ~/.ssh/known_hosts 2>/dev/null
          
          # Upload files
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            docker-compose.deploy.yml nginx.conf .env \
            root@${{ secrets.DIGITALOCEAN_DROPLET_IP }}:/opt/pulseai/
          
          # Deploy with automatic SSL and CORS fix
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            root@${{ secrets.DIGITALOCEAN_DROPLET_IP }} << 'EOF'
            cd /opt/pulseai
            
            # Source environment variables
            set -a
            source .env
            set +a
            
            # Backup current deployment
            [ -f docker-compose.yml ] && cp docker-compose.yml docker-compose.yml.backup
            mv docker-compose.deploy.yml docker-compose.yml
            
            # Install Docker if needed
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              systemctl start docker
              systemctl enable docker
            fi
            
            # Stop existing services
            docker compose down --remove-orphans
            
            # Pull latest images
            docker compose pull
            
            echo "🚀 Starting services..."
            docker compose up -d
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 30
            
            # Check if SSL certificate exists, if not get it
            if [ ! -f "/var/lib/docker/volumes/pulseai_letsencrypt/_data/live/${DOMAIN_NAME}/fullchain.pem" ]; then
              echo "🔒 Getting SSL certificate..."
              docker compose run --rm certbot certonly \
                --webroot \
                --webroot-path=/var/www/certbot \
                --email ${CERTBOT_EMAIL} \
                --agree-tos \
                --no-eff-email \
                -d ${DOMAIN_NAME}
              
              # Restart nginx to load certificate
              docker compose restart nginx
              sleep 15
            else
              echo "✅ SSL certificate already exists"
            fi
            
            echo "📋 Final service status:"
            docker compose ps
            
            echo "🧪 Testing endpoints..."
            
            # Test HTTPS
            if curl -f -s https://${DOMAIN_NAME}/health > /dev/null; then
              echo "✅ HTTPS endpoint working"
            else
              echo "❌ HTTPS endpoint failed"
              # Show nginx logs for debugging
              docker compose logs nginx --tail=10
            fi
            
            # Test CORS
            echo "🔍 Testing CORS headers..."
            CORS_TEST=$(curl -s -H "Origin: https://pulseretention.netlify.app" -I https://${DOMAIN_NAME}/health | grep -i "access-control-allow-origin" | wc -l)
            if [ "$CORS_TEST" -eq 1 ]; then
              echo "✅ CORS headers correct (single origin header)"
            else
              echo "⚠️ CORS headers: $CORS_TEST (should be 1)"
              curl -s -H "Origin: https://pulseretention.netlify.app" -I https://${DOMAIN_NAME}/health | grep -i "access-control"
            fi
            
            # Setup certificate auto-renewal
            (crontab -l 2>/dev/null; echo "0 12 * * * cd /opt/pulseai && docker compose run --rm certbot renew --quiet && docker compose restart nginx") | crontab - 2>/dev/null
            
            echo ""
            echo "🎉 DEPLOYMENT COMPLETE!"
            echo "========================"
            echo "✅ HTTPS API: https://${DOMAIN_NAME}"
            echo "✅ Health check: https://${DOMAIN_NAME}/health"
            echo "✅ Ready for client: https://pulseretention.netlify.app"
            
          EOF
      
      # Step 10: Final verification
      - name: Verify deployment
        run: |
          echo "🔍 Final verification..."
          
          # Test HTTPS endpoint
          if curl -f -s https://${{ secrets.DOMAIN_NAME }}/health > /dev/null; then
            echo "✅ API is working via HTTPS"
          else
            echo "❌ API verification failed"
            exit 1
          fi
          
          # Test CORS
          CORS_HEADERS=$(curl -s -H "Origin: https://pulseretention.netlify.app" -I https://${{ secrets.DOMAIN_NAME }}/health | grep -i "access-control-allow-origin" | wc -l)
          if [ "$CORS_HEADERS" -eq 1 ]; then
            echo "✅ CORS configuration correct"
          else
            echo "⚠️ CORS may have issues - found $CORS_HEADERS origin headers"
          fi
          
          echo ""
          echo "🚀 Deployment successful!"
          echo "🔗 Your API: https://${{ secrets.DOMAIN_NAME }}"
          echo "🎯 Update your client to use: https://${{ secrets.DOMAIN_NAME }}"
// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250605102127_MultiSourceCustomerData")]
    partial class MultiSourceCustomerData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Analytics.DashboardMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ActiveCampaigns")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("active_campaigns");

                    b.Property<decimal>("AverageLifetimeValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("average_lifetime_value");

                    b.Property<decimal>("CampaignSuccessRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("campaign_success_rate");

                    b.Property<decimal>("ChurnRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("churn_rate");

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<int>("HighRiskCustomers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("high_risk_customers");

                    b.Property<DateTime>("MetricDate")
                        .HasColumnType("date")
                        .HasColumnName("metric_date");

                    b.Property<decimal>("RevenueRecovered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("revenue_recovered");

                    b.Property<int>("TotalCustomers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_customers");

                    b.HasKey("Id")
                        .HasName("pk_dashboard_metrics");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_dashboard_metrics_company_id");

                    b.HasIndex("MetricDate")
                        .HasDatabaseName("ix_dashboard_metrics_metric_date");

                    b.HasIndex("CompanyId", "MetricDate")
                        .IsUnique()
                        .HasDatabaseName("ix_dashboard_metrics_company_date");

                    b.ToTable("dashboard_metrics", "public");
                });

            modelBuilder.Entity("Domain.Campaigns.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ClickedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("clicked_count");

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("ConvertedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("converted_count");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("OpenedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("opened_count");

                    b.Property<decimal>("RevenueRecovered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("revenue_recovered");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("scheduled_date");

                    b.Property<Guid?>("SegmentId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("segment_id");

                    b.Property<int>("SentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sent_count");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("sent_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("trigger");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_campaigns");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_campaigns_company_id");

                    b.HasIndex("ScheduledDate")
                        .HasDatabaseName("ix_campaigns_scheduled_date");

                    b.HasIndex("SegmentId")
                        .HasDatabaseName("ix_campaigns_segment_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_campaigns_status");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_campaigns_type");

                    b.ToTable("campaigns", "public");
                });

            modelBuilder.Entity("Domain.Campaigns.CampaignStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampaignId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<int>("ClickedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("clicked_count");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("ConvertedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("converted_count");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<TimeSpan>("Delay")
                        .HasColumnType("interval")
                        .HasColumnName("delay");

                    b.Property<int>("OpenedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("opened_count");

                    b.Property<int>("SentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sent_count");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer")
                        .HasColumnName("step_order");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_campaign_steps");

                    b.HasIndex("CampaignId")
                        .HasDatabaseName("ix_campaign_steps_campaign_id");

                    b.HasIndex("CampaignId", "StepOrder")
                        .IsUnique()
                        .HasDatabaseName("ix_campaign_steps_campaign_order");

                    b.ToTable("campaign_steps", "public");
                });

            modelBuilder.Entity("Domain.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime?>("ChurnPredictionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("churn_prediction_date");

                    b.Property<string>("ChurnRiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("churn_risk_level");

                    b.Property<decimal>("ChurnRiskScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("churn_risk_score");

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PrimaryCrmSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("primary_crm_source");

                    b.Property<string>("PrimaryEngagementSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("primary_engagement_source");

                    b.Property<string>("PrimaryMarketingSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("primary_marketing_source");

                    b.Property<string>("PrimaryPaymentSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("primary_payment_source");

                    b.Property<string>("PrimarySupportSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("primary_support_source");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasColumnName("time_zone");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("ChurnRiskScore")
                        .HasDatabaseName("ix_customers_churn_risk_score");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_customers_email");

                    b.HasIndex("PrimaryCrmSource")
                        .HasDatabaseName("ix_customers_primary_crm_source");

                    b.HasIndex("PrimaryPaymentSource")
                        .HasDatabaseName("ix_customers_primary_payment_source");

                    b.HasIndex("CompanyId", "Email")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_company_email");

                    b.ToTable("customers", "public");
                });

            modelBuilder.Entity("Domain.Customers.CustomerActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ActivityDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activity_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_customer_activities");

                    b.HasIndex("ActivityDate")
                        .HasDatabaseName("ix_customer_activities_activity_date");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_activities_customer_id");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_customer_activities_type");

                    b.HasIndex("CustomerId", "ActivityDate")
                        .HasDatabaseName("ix_customer_activities_customer_date");

                    b.ToTable("customer_activities", "public");
                });

            modelBuilder.Entity("Domain.Customers.CustomerCrmData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Dictionary<string, object>>("CustomFields")
                        .HasColumnType("jsonb")
                        .HasColumnName("custom_fields");

                    b.Property<Guid>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<int>("DealCount")
                        .HasColumnType("integer")
                        .HasColumnName("deal_count");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_id");

                    b.Property<DateTime?>("FirstContactDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_contact_date");

                    b.Property<string>("ImportBatchId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("import_batch_id");

                    b.Property<Guid?>("ImportedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("imported_by_user_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimarySource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary_source");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity_date");

                    b.Property<DateTime?>("LastContactDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_contact_date");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LeadSource")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("lead_source");

                    b.Property<string>("LeadStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lead_status");

                    b.Property<string>("LifecycleStage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lifecycle_stage");

                    b.Property<string>("SalesOwnerId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sales_owner_id");

                    b.Property<string>("SalesOwnerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sales_owner_name");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.Property<int>("SourcePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("source_priority");

                    b.Property<string>("SyncVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sync_version");

                    b.Property<decimal>("TotalDealValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_deal_value");

                    b.Property<decimal>("WonDealValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("won_deal_value");

                    b.HasKey("Id")
                        .HasName("pk_customer_crm_data");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_crm_data_customer_id");

                    b.HasIndex("ImportBatchId")
                        .HasDatabaseName("ix_customer_crm_data_import_batch");

                    b.HasIndex("ImportedByUserId")
                        .HasDatabaseName("ix_customer_crm_data_imported_by_user_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_customer_crm_data_is_active");

                    b.HasIndex("CustomerId", "IsPrimarySource")
                        .HasDatabaseName("ix_customer_crm_data_customer_primary");

                    b.HasIndex("CustomerId", "Source")
                        .HasDatabaseName("ix_customer_crm_data_customer_source");

                    b.HasIndex("Source", "ExternalId")
                        .HasDatabaseName("ix_customer_crm_data_source_external_id");

                    b.ToTable("customer_crm_data", "public");
                });

            modelBuilder.Entity("Domain.Customers.CustomerEngagementData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AverageSessionDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8,2)")
                        .HasDefaultValue(0.0)
                        .HasColumnName("average_session_duration");

                    b.Property<double>("BounceRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.0)
                        .HasColumnName("bounce_rate");

                    b.Property<string>("CustomEvents")
                        .HasColumnType("jsonb")
                        .HasColumnName("custom_events");

                    b.Property<Guid>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_id");

                    b.Property<string>("FeatureUsageCounts")
                        .HasColumnType("jsonb")
                        .HasColumnName("feature_usage_counts");

                    b.Property<decimal>("FeatureUsagePercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("feature_usage_percentage");

                    b.Property<DateTime?>("FirstLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_login_date");

                    b.Property<string>("ImportBatchId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("import_batch_id");

                    b.Property<Guid?>("ImportedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("imported_by_user_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimarySource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary_source");

                    b.Property<DateTime?>("LastFeatureUsage")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_feature_usage");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MonthlyLoginFrequency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("monthly_login_frequency");

                    b.Property<string>("MostVisitedPages")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("most_visited_pages");

                    b.Property<int>("PageViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("page_views");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.Property<int>("SourcePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("source_priority");

                    b.Property<string>("SyncVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sync_version");

                    b.Property<int>("TotalSessions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_sessions");

                    b.Property<int>("WeeklyLoginFrequency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weekly_login_frequency");

                    b.HasKey("Id")
                        .HasName("pk_customer_engagement_data");

                    b.HasIndex("AverageSessionDuration")
                        .HasDatabaseName("ix_customer_engagement_data_avg_session_duration");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_engagement_data_customer_id");

                    b.HasIndex("FeatureUsagePercentage")
                        .HasDatabaseName("ix_customer_engagement_data_feature_usage");

                    b.HasIndex("ImportBatchId")
                        .HasDatabaseName("ix_customer_engagement_data_import_batch");

                    b.HasIndex("ImportedByUserId")
                        .HasDatabaseName("ix_customer_engagement_data_imported_by_user_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_customer_engagement_data_is_active");

                    b.HasIndex("LastLoginDate")
                        .HasDatabaseName("ix_customer_engagement_data_last_login");

                    b.HasIndex("WeeklyLoginFrequency")
                        .HasDatabaseName("ix_customer_engagement_data_weekly_login_freq");

                    b.HasIndex("CustomerId", "IsPrimarySource")
                        .HasDatabaseName("ix_customer_engagement_data_customer_primary");

                    b.HasIndex("CustomerId", "LastLoginDate")
                        .HasDatabaseName("ix_customer_engagement_data_customer_last_login");

                    b.HasIndex("CustomerId", "Source")
                        .HasDatabaseName("ix_customer_engagement_data_customer_source");

                    b.HasIndex("Source", "ExternalId")
                        .HasDatabaseName("ix_customer_engagement_data_source_external_id");

                    b.HasIndex("WeeklyLoginFrequency", "FeatureUsagePercentage")
                        .HasDatabaseName("ix_customer_engagement_data_activity_usage");

                    b.ToTable("customer_engagement_data", "public");
                });

            modelBuilder.Entity("Domain.Customers.CustomerMarketingData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AverageClickRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.0)
                        .HasColumnName("average_click_rate");

                    b.Property<double>("AverageOpenRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.0)
                        .HasColumnName("average_open_rate");

                    b.Property<int>("CampaignCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("campaign_count");

                    b.Property<Guid>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_id");

                    b.Property<string>("ImportBatchId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("import_batch_id");

                    b.Property<Guid?>("ImportedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("imported_by_user_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimarySource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary_source");

                    b.Property<bool>("IsSubscribed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_subscribed");

                    b.Property<DateTime?>("LastCampaignEngagement")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_campaign_engagement");

                    b.Property<DateTime?>("LastEmailClickDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_email_click_date");

                    b.Property<DateTime?>("LastEmailOpenDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_email_open_date");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Lists")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("lists");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.Property<int>("SourcePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("source_priority");

                    b.Property<DateTime?>("SubscriptionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("subscription_date");

                    b.Property<string>("SyncVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sync_version");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<int>("TotalEmailsClicked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_emails_clicked");

                    b.Property<int>("TotalEmailsOpened")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_emails_opened");

                    b.Property<int>("TotalEmailsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_emails_sent");

                    b.Property<DateTime?>("UnsubscriptionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unsubscription_date");

                    b.HasKey("Id")
                        .HasName("pk_customer_marketing_data");

                    b.HasIndex("AverageOpenRate")
                        .HasDatabaseName("ix_customer_marketing_data_open_rate");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_marketing_data_customer_id");

                    b.HasIndex("ImportBatchId")
                        .HasDatabaseName("ix_customer_marketing_data_import_batch");

                    b.HasIndex("ImportedByUserId")
                        .HasDatabaseName("ix_customer_marketing_data_imported_by_user_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_customer_marketing_data_is_active");

                    b.HasIndex("IsSubscribed")
                        .HasDatabaseName("ix_customer_marketing_data_is_subscribed");

                    b.HasIndex("LastEmailOpenDate")
                        .HasDatabaseName("ix_customer_marketing_data_last_email_open");

                    b.HasIndex("CustomerId", "IsPrimarySource")
                        .HasDatabaseName("ix_customer_marketing_data_customer_primary");

                    b.HasIndex("CustomerId", "Source")
                        .HasDatabaseName("ix_customer_marketing_data_customer_source");

                    b.HasIndex("Source", "ExternalId")
                        .HasDatabaseName("ix_customer_marketing_data_source_external_id");

                    b.ToTable("customer_marketing_data", "public");
                });

            modelBuilder.Entity("Domain.Customers.CustomerPaymentData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BillingInterval")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("billing_interval");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<decimal>("CurrentBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("current_balance");

                    b.Property<Guid>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_id");

                    b.Property<string>("ImportBatchId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("import_batch_id");

                    b.Property<Guid?>("ImportedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("imported_by_user_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimarySource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary_source");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_payment_date");

                    b.Property<DateTime?>("LastPaymentFailureDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_payment_failure_date");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("LifetimeValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("lifetime_value");

                    b.Property<decimal>("MonthlyRecurringRevenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("monthly_recurring_revenue");

                    b.Property<DateTime?>("NextBillingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_billing_date");

                    b.Property<int>("PaymentFailureCount")
                        .HasColumnType("integer")
                        .HasColumnName("payment_failure_count");

                    b.Property<string>("PaymentMethodType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method_type");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_status");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("plan");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.Property<int>("SourcePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("source_priority");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("subscription_end_date");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("subscription_start_date");

                    b.Property<string>("SubscriptionStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("subscription_status");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trial_end_date");

                    b.Property<DateTime?>("TrialStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trial_start_date");

                    b.HasKey("Id")
                        .HasName("pk_customer_payment_data");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_payment_data_customer_id");

                    b.HasIndex("ImportBatchId")
                        .HasDatabaseName("ix_customer_payment_data_import_batch");

                    b.HasIndex("ImportedByUserId")
                        .HasDatabaseName("ix_customer_payment_data_imported_by_user_id");

                    b.HasIndex("PaymentStatus")
                        .HasDatabaseName("ix_customer_payment_data_payment_status");

                    b.HasIndex("SubscriptionStatus")
                        .HasDatabaseName("ix_customer_payment_data_subscription_status");

                    b.HasIndex("CustomerId", "IsPrimarySource")
                        .HasDatabaseName("ix_customer_payment_data_customer_primary");

                    b.HasIndex("CustomerId", "Source")
                        .HasDatabaseName("ix_customer_payment_data_customer_source");

                    b.HasIndex("Source", "ExternalId")
                        .HasDatabaseName("ix_customer_payment_data_source_external_id");

                    b.ToTable("customer_payment_data", "public");
                });

            modelBuilder.Entity("Domain.Customers.CustomerSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageChurnRate")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("average_churn_rate");

                    b.Property<decimal>("AverageLifetimeValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("average_lifetime_value");

                    b.Property<decimal>("AverageRevenue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("average_revenue");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasDefaultValue("#3b82f6")
                        .HasColumnName("color");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("CustomerCount")
                        .HasColumnType("integer")
                        .HasColumnName("customer_count");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_customer_segments");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_customer_segments_company_id");

                    b.ToTable("customer_segments", "public");
                });

            modelBuilder.Entity("Domain.Customers.CustomerSupportData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AverageResolutionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8,2)")
                        .HasDefaultValue(0.0)
                        .HasColumnName("average_resolution_time");

                    b.Property<int>("ClosedTickets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("closed_tickets");

                    b.Property<Guid>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<double>("CustomerSatisfactionScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.0)
                        .HasColumnName("customer_satisfaction_score");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_id");

                    b.Property<DateTime?>("FirstTicketDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_ticket_date");

                    b.Property<int>("HighPriorityTickets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("high_priority_tickets");

                    b.Property<string>("ImportBatchId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("import_batch_id");

                    b.Property<Guid?>("ImportedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("imported_by_user_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimarySource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary_source");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastTicketDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_ticket_date");

                    b.Property<int>("LowPriorityTickets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("low_priority_tickets");

                    b.Property<int>("MediumPriorityTickets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("medium_priority_tickets");

                    b.Property<int>("OpenTickets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("open_tickets");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.Property<int>("SourcePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("source_priority");

                    b.Property<string>("SyncVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sync_version");

                    b.Property<string>("TicketsByCategory")
                        .HasColumnType("jsonb")
                        .HasColumnName("tickets_by_category");

                    b.Property<int>("TotalTickets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_tickets");

                    b.Property<int>("UrgentTickets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("urgent_tickets");

                    b.HasKey("Id")
                        .HasName("pk_customer_support_data");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_support_data_customer_id");

                    b.HasIndex("CustomerSatisfactionScore")
                        .HasDatabaseName("ix_customer_support_data_csat_score");

                    b.HasIndex("ImportBatchId")
                        .HasDatabaseName("ix_customer_support_data_import_batch");

                    b.HasIndex("ImportedByUserId")
                        .HasDatabaseName("ix_customer_support_data_imported_by_user_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_customer_support_data_is_active");

                    b.HasIndex("LastTicketDate")
                        .HasDatabaseName("ix_customer_support_data_last_ticket");

                    b.HasIndex("OpenTickets")
                        .HasDatabaseName("ix_customer_support_data_open_tickets");

                    b.HasIndex("CustomerId", "IsPrimarySource")
                        .HasDatabaseName("ix_customer_support_data_customer_primary");

                    b.HasIndex("CustomerId", "Source")
                        .HasDatabaseName("ix_customer_support_data_customer_source");

                    b.HasIndex("Source", "ExternalId")
                        .HasDatabaseName("ix_customer_support_data_source_external_id");

                    b.ToTable("customer_support_data", "public");
                });

            modelBuilder.Entity("Domain.Imports.ImportJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error_message");

                    b.Property<int>("FailedRecords")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("failed_records");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<string>("ImportSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("import_source");

                    b.Property<string>("ImportSummary")
                        .HasColumnType("text")
                        .HasColumnName("import_summary");

                    b.Property<string>("ImportUpdates")
                        .HasColumnType("text")
                        .HasColumnName("import_updates");

                    b.Property<int>("NewRecords")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("new_records");

                    b.Property<int>("ProcessedRecords")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("processed_records");

                    b.Property<int>("SkippedRecords")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("skipped_records");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<int>("SuccessfulRecords")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("successful_records");

                    b.Property<int>("TotalRecords")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_records");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<int>("UpdatedRecords")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("updated_records");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("ValidationErrors")
                        .HasColumnType("text")
                        .HasColumnName("validation_errors");

                    b.HasKey("Id")
                        .HasName("pk_import_jobs");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_import_jobs_company_id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_import_jobs_created_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_import_jobs_status");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_import_jobs_type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_import_jobs_user_id");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("ix_import_jobs_status_created");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("ix_import_jobs_user_status");

                    b.ToTable("import_jobs", "public");
                });

            modelBuilder.Entity("Domain.Integration.Integration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Dictionary<string, string>>("Configuration")
                        .HasColumnType("jsonb")
                        .HasColumnName("configuration");

                    b.Property<DateTime>("ConfiguredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("configured_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("ConfiguredByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("configured_by_user_id");

                    b.Property<Dictionary<string, string>>("Credentials")
                        .HasColumnType("jsonb")
                        .HasColumnName("credentials");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("LastSyncError")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("last_sync_error");

                    b.Property<DateTime?>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("SyncedRecordCount")
                        .HasColumnType("integer")
                        .HasColumnName("synced_record_count");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_integrations");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_integrations_company_id");

                    b.HasIndex("ConfiguredByUserId")
                        .HasDatabaseName("ix_integrations_configured_by_user_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_integrations_status");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_integrations_type");

                    b.HasIndex("CompanyId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_integrations_company_type");

                    b.ToTable("integrations", "public");
                });

            modelBuilder.Entity("Domain.Notification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionText")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action_text");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("action_url");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("message");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("Category")
                        .HasDatabaseName("ix_notifications_category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_notifications_created_at");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_notifications_expires_at");

                    b.HasIndex("IsRead")
                        .HasDatabaseName("ix_notifications_is_read");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notifications_user_id");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("ix_notifications_user_created");

                    b.HasIndex("UserId", "IsRead")
                        .HasDatabaseName("ix_notifications_user_read");

                    b.ToTable("notifications", "public");
                });

            modelBuilder.Entity("Domain.Segments.ChurnPrediction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("ModelVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("model_version");

                    b.Property<DateTime>("PredictionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("prediction_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Dictionary<string, decimal>>("RiskFactors")
                        .HasColumnType("jsonb")
                        .HasColumnName("risk_factors");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("risk_level");

                    b.Property<decimal>("RiskScore")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("risk_score");

                    b.HasKey("Id")
                        .HasName("pk_churn_predictions");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_churn_predictions_customer_id");

                    b.HasIndex("PredictionDate")
                        .HasDatabaseName("ix_churn_predictions_prediction_date");

                    b.HasIndex("CustomerId", "PredictionDate")
                        .HasDatabaseName("ix_churn_predictions_customer_date");

                    b.ToTable("churn_predictions", "public");
                });

            modelBuilder.Entity("Domain.Segments.SegmentCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("field");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("label");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("operator");

                    b.Property<Guid>("SegmentId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("segment_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_segment_criteria");

                    b.HasIndex("Field")
                        .HasDatabaseName("ix_segment_criteria_field");

                    b.HasIndex("SegmentId")
                        .HasDatabaseName("ix_segment_criteria_segment_id");

                    b.ToTable("segment_criteria", "public");
                });

            modelBuilder.Entity("Domain.Todos.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.PrimitiveCollection<List<string>>("Labels")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("labels");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_todo_items");

                    b.ToTable("todo_items", "public");
                });

            modelBuilder.Entity("Domain.Users.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Country")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Domain")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("domain");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("industry");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Free")
                        .HasColumnName("plan");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_domain");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_companies_name");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_companies_owner_id");

                    b.ToTable("companies", "public");
                });

            modelBuilder.Entity("Domain.Users.CompanyInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<Guid?>("AcceptedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("accepted_by_user_id");

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("InvitationToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("invitation_token");

                    b.Property<Guid>("InvitedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("invited_by_user_id");

                    b.Property<string>("InvitedRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("invited_role");

                    b.Property<bool>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_accepted");

                    b.HasKey("Id")
                        .HasName("pk_company_invitations");

                    b.HasIndex("AcceptedByUserId")
                        .HasDatabaseName("ix_company_invitations_accepted_by_user_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_invitations_company_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_company_invitations_email");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_company_invitations_expires_at");

                    b.HasIndex("InvitationToken")
                        .IsUnique()
                        .HasDatabaseName("ix_company_invitations_token");

                    b.HasIndex("InvitedByUserId")
                        .HasDatabaseName("ix_company_invitations_invited_by_user_id");

                    b.HasIndex("Email", "CompanyId", "IsAccepted")
                        .HasDatabaseName("ix_company_invitations_email_company_accepted");

                    b.ToTable("company_invitations", "public");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsCompanyOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_company_owner");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_company_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("campaign_customers", b =>
                {
                    b.Property<Guid>("campaign_id")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<Guid>("customer_id")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.HasKey("campaign_id", "customer_id")
                        .HasName("pk_campaign_customers");

                    b.HasIndex("campaign_id")
                        .HasDatabaseName("ix_campaign_customers_campaign_id");

                    b.HasIndex("customer_id")
                        .HasDatabaseName("ix_campaign_customers_customer_id");

                    b.ToTable("campaign_customers", "public");
                });

            modelBuilder.Entity("Domain.Analytics.DashboardMetrics", b =>
                {
                    b.HasOne("Domain.Users.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dashboard_metrics_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Campaigns.Campaign", b =>
                {
                    b.HasOne("Domain.Users.Company", "Company")
                        .WithMany("Campaigns")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_campaigns_companies_company_id");

                    b.HasOne("Domain.Customers.CustomerSegment", "Segment")
                        .WithMany("Campaigns")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_campaigns_customer_segments_segment_id");

                    b.Navigation("Company");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Domain.Campaigns.CampaignStep", b =>
                {
                    b.HasOne("Domain.Campaigns.Campaign", "Campaign")
                        .WithMany("Steps")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_campaign_steps_campaigns_campaign_id");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Domain.Customers.Customer", b =>
                {
                    b.HasOne("Domain.Users.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customers_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Customers.CustomerActivity", b =>
                {
                    b.HasOne("Domain.Customers.Customer", "Customer")
                        .WithMany("Activities")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_activities_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Customers.CustomerCrmData", b =>
                {
                    b.HasOne("Domain.Customers.Customer", "Customer")
                        .WithMany("CrmDataSources")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_crm_data_customers_customer_id");

                    b.HasOne("Domain.Users.User", "ImportedBy")
                        .WithMany()
                        .HasForeignKey("ImportedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customer_crm_data_users_imported_by_user_id");

                    b.Navigation("Customer");

                    b.Navigation("ImportedBy");
                });

            modelBuilder.Entity("Domain.Customers.CustomerEngagementData", b =>
                {
                    b.HasOne("Domain.Customers.Customer", "Customer")
                        .WithMany("EngagementDataSources")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_engagement_data_customers_customer_id");

                    b.HasOne("Domain.Users.User", "ImportedBy")
                        .WithMany()
                        .HasForeignKey("ImportedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customer_engagement_data_users_imported_by_user_id");

                    b.Navigation("Customer");

                    b.Navigation("ImportedBy");
                });

            modelBuilder.Entity("Domain.Customers.CustomerMarketingData", b =>
                {
                    b.HasOne("Domain.Customers.Customer", "Customer")
                        .WithMany("MarketingDataSources")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_marketing_data_customers_customer_id");

                    b.HasOne("Domain.Users.User", "ImportedBy")
                        .WithMany()
                        .HasForeignKey("ImportedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customer_marketing_data_users_imported_by_user_id");

                    b.Navigation("Customer");

                    b.Navigation("ImportedBy");
                });

            modelBuilder.Entity("Domain.Customers.CustomerPaymentData", b =>
                {
                    b.HasOne("Domain.Customers.Customer", "Customer")
                        .WithMany("PaymentDataSources")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_payment_data_customers_customer_id");

                    b.HasOne("Domain.Users.User", "ImportedBy")
                        .WithMany()
                        .HasForeignKey("ImportedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customer_payment_data_users_imported_by_user_id");

                    b.Navigation("Customer");

                    b.Navigation("ImportedBy");
                });

            modelBuilder.Entity("Domain.Customers.CustomerSegment", b =>
                {
                    b.HasOne("Domain.Users.Company", "Company")
                        .WithMany("Segments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_segments_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Customers.CustomerSupportData", b =>
                {
                    b.HasOne("Domain.Customers.Customer", "Customer")
                        .WithMany("SupportDataSources")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_support_data_customers_customer_id");

                    b.HasOne("Domain.Users.User", "ImportedBy")
                        .WithMany()
                        .HasForeignKey("ImportedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customer_support_data_users_imported_by_user_id");

                    b.Navigation("Customer");

                    b.Navigation("ImportedBy");
                });

            modelBuilder.Entity("Domain.Imports.ImportJob", b =>
                {
                    b.HasOne("Domain.Users.Company", "Company")
                        .WithMany("ImportJobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_import_jobs_companies_company_id");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_import_jobs_users_user_id");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Integration.Integration", b =>
                {
                    b.HasOne("Domain.Users.Company", "Company")
                        .WithMany("Integrations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_integrations_companies_company_id");

                    b.HasOne("Domain.Users.User", "ConfiguredBy")
                        .WithMany("ConfiguredIntegrations")
                        .HasForeignKey("ConfiguredByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_integrations_users_configured_by_user_id");

                    b.Navigation("Company");

                    b.Navigation("ConfiguredBy");
                });

            modelBuilder.Entity("Domain.Notification.Notification", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Segments.ChurnPrediction", b =>
                {
                    b.HasOne("Domain.Customers.Customer", "Customer")
                        .WithMany("ChurnPredictions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_churn_predictions_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Segments.SegmentCriteria", b =>
                {
                    b.HasOne("Domain.Customers.CustomerSegment", "Segment")
                        .WithMany("Criteria")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_segment_criteria_customer_segments_segment_id");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Domain.Users.Company", b =>
                {
                    b.HasOne("Domain.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_companies_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Users.CompanyInvitation", b =>
                {
                    b.HasOne("Domain.Users.User", "AcceptedBy")
                        .WithMany()
                        .HasForeignKey("AcceptedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_company_invitations_users_accepted_by_user_id");

                    b.HasOne("Domain.Users.Company", "Company")
                        .WithMany("Invitations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_invitations_companies_company_id");

                    b.HasOne("Domain.Users.User", "InvitedBy")
                        .WithMany("SentInvitations")
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_company_invitations_users_invited_by_user_id");

                    b.Navigation("AcceptedBy");

                    b.Navigation("Company");

                    b.Navigation("InvitedBy");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.Users.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("campaign_customers", b =>
                {
                    b.HasOne("Domain.Campaigns.Campaign", null)
                        .WithMany()
                        .HasForeignKey("campaign_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_campaign_customers_campaigns_campaign_id");

                    b.HasOne("Domain.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_campaign_customers_customers_customer_id");
                });

            modelBuilder.Entity("Domain.Campaigns.Campaign", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Domain.Customers.Customer", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ChurnPredictions");

                    b.Navigation("CrmDataSources");

                    b.Navigation("EngagementDataSources");

                    b.Navigation("MarketingDataSources");

                    b.Navigation("PaymentDataSources");

                    b.Navigation("SupportDataSources");
                });

            modelBuilder.Entity("Domain.Customers.CustomerSegment", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("Domain.Users.Company", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Customers");

                    b.Navigation("ImportJobs");

                    b.Navigation("Integrations");

                    b.Navigation("Invitations");

                    b.Navigation("Segments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Navigation("ConfiguredIntegrations");

                    b.Navigation("SentInvitations");
                });
#pragma warning restore 612, 618
        }
    }
}
